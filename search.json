{"Structs/Vector3D.html#/s:9MeshTools8Vector3DV1i1j1kACSd_S2dtcfc":{"name":"init(i:j:k:)","abstract":"<p>The simplest and only initializer</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV9normalizeyyF":{"name":"normalize()","abstract":"<p>Destructively make this a unit vector</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV6lengthSdyF":{"name":"length()","abstract":"<p>Figure the combined length of all three components</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV6isZeroSbyF":{"name":"isZero()","abstract":"<p>Check to see if the vector has zero length</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV6isUnitSbyF":{"name":"isUnit()","abstract":"<p>Check to see if this is a unit vector</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV7reverseACyF":{"name":"reverse()","abstract":"<p>Construct a vector with the opposite direction</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV4perpACyF":{"name":"perp()","abstract":"<p>Construct a vector re-directed one quarter turn away in the counterclockwise direction in the XY plane","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV5built4from7towards4unitAcA7Point3DV_AISbtFZ":{"name":"built(from:towards:unit:)","abstract":"<p>Construct vector from first input point towards the second","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV10dotProduct3lhs3rhsSdAC_ACtFZ":{"name":"dotProduct(lhs:rhs:)","abstract":"<p>Standard definition of dot product</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV12crossProduct3lhs3rhsA2C_ACtKFZ":{"name":"crossProduct(lhs:rhs:)","abstract":"<p>Standard definition of cross product","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV10isOpposite3lhs3rhsSbAC_ACtFZ":{"name":"isOpposite(lhs:rhs:)","abstract":"<p>Check for vectors with the same direction but a different sense","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV8isScaled3lhs3rhsSbAC_ACtKFZ":{"name":"isScaled(lhs:rhs:)","abstract":"<p>Check to see if one vector is a scaled version of the other","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV9findAngle11baselineVec9measureTo4perpSdAC_A2CtKFZ":{"name":"findAngle(baselineVec:measureTo:perp:)","abstract":"<p>Find a positive or negative angle between two unit vectors</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV6makeXZ5angleACSd_tFZ":{"name":"makeXZ(angle:)","abstract":"<p>Build a Vector3D in the XY plane</p>","parent_name":"Vector3D"},"Structs/Vector3D.html#/s:9MeshTools8Vector3DV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compare each component of the vector for equality</p>","parent_name":"Vector3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV7EpsilonSdvpZ":{"name":"Epsilon","abstract":"<p>Threshhold of separation for equality checks</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV1x1y1zACSd_S2dtcfc":{"name":"init(x:y:z:)","abstract":"<p>The simplest and only initializer.  Required for a struct.</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Generate the unique value using Swift 4.2 tools","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV6offset3pip4jumpA2C_AA8Vector3DVtFZ":{"name":"offset(pip:jump:)","abstract":"<p>Create a new point by offsetting</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV4dist3pt13pt2SdAC_ACtFZ":{"name":"dist(pt1:pt2:)","abstract":"<p>Calculate the distance between two of &lsquo;em</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV13isThreeUnique5alpha4beta5gammaSbAC_A2CtFZ":{"name":"isThreeUnique(alpha:beta:gamma:)","abstract":"<p>Check if three points are not duplicate.  Useful for building triangles, or defining arcs</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV13isThreeLinear5alpha4beta5gammaSbAC_A2CtFZ":{"name":"isThreeLinear(alpha:beta:gamma:)","abstract":"<p>See if three points are all in a line","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV12isUniquePool5flockSbSayACG_tFZ":{"name":"isUniquePool(flock:)","abstract":"<p>Check if all contained points are unique.</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV6midway5alpha4betaA2C_ACtFZ":{"name":"midway(alpha:beta:)","abstract":"<p>Create a point midway between two others</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV10angleAbout3ctr5tniopSdAC_ACtFZ":{"name":"angleAbout(ctr:tniop:)","abstract":"<p>Determine the angle (in radians) CCW from the positive X axis in the XY plane</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV11makeCGPoint3pipSo0E0VAC_tFZ":{"name":"makeCGPoint(pip:)","abstract":"<p>Ignore the Z value and convert</p>","parent_name":"Point3D"},"Structs/Point3D.html#/s:9MeshTools7Point3DV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Check to see that the distance between the two is less than Point3D.Epsilon</p>","parent_name":"Point3D"},"Structs/Plane.html#/s:9MeshTools5PlaneV11getLocationAA7Point3DVyF":{"name":"getLocation()","abstract":"<p>A getter for the point defining the plane</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV9getNormalAA8Vector3DVyF":{"name":"getNormal()","abstract":"<p>A getter for the vector defining the plane</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV18resolveRelativeVec3pipAA8Vector3DV02inC0_AG4perptAA7Point3DV_tF":{"name":"resolveRelativeVec(pip:)","abstract":"<p>This needs to be added back into SketchGen</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV6mirror4flat3pipAA7Point3DVAC_AHtFZ":{"name":"mirror(flat:pip:)","abstract":"<p>Flip points to the opposite side of the plane</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV6mirror4flat4wireAA7LineSegCAC_AHtFZ":{"name":"mirror(flat:wire:)","abstract":"<p>Flip line segment to the opposite side of the plane</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV10isOpposite6pointA0F1BSbAA7Point3DV_AHtF":{"name":"isOpposite(pointA:pointB:)","abstract":"<p>Test for points being on opposite sides.","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV10isParallel4flat4enilSbAC_AA4LineVtFZ":{"name":"isParallel(flat:enil:)","abstract":"<p>Check to see that the line direction is perpendicular to the normal</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV12isCoincident5enalp4enilSbAC_AA4LineVtFZ":{"name":"isCoincident(enalp:enil:)","abstract":"<p>Check to see that the line is parallel to the plane, and lies on it</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV12isCoincident4flat3pipSbAC_AA7Point3DVtFZ":{"name":"isCoincident(flat:pip:)","abstract":"<p>Does the argument point lie on the plane?</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV10isParallel3lhs3rhsSbAC_ACtFZ":{"name":"isParallel(lhs:rhs:)","abstract":"<p>Are the normals either parallel or opposite?</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV12isCoincident3lhs3rhsSbAC_ACtFZ":{"name":"isCoincident(lhs:rhs:)","abstract":"<p>Planes are parallel, and rhs location lies on lhs</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV13buildParallel4base6offset7reverseA2C_SdSbtKFZ":{"name":"buildParallel(base:offset:reverse:)","abstract":"<p>Construct a parallel plane offset some distance</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV17buildPerpThruLine4enil5enalpAcA0G0V_ACtKFZ":{"name":"buildPerpThruLine(enil:enalp:)","abstract":"<p>Construct a new plane perpendicular to an existing plane, and through a line on that plane","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV013intersectLineC04enil5enalpAA7Point3DVAA0E0V_ACtKFZ":{"name":"intersectLinePlane(enil:enalp:)","abstract":"<p>Generate a point by intersecting a line and a plane</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV15intersectPlanes5flatA0F1BAA4LineVAC_ACtKFZ":{"name":"intersectPlanes(flatA:flatB:)","abstract":"<p>Construct a line by intersecting two planes</p>","parent_name":"Plane"},"Structs/Plane.html#/s:9MeshTools5PlaneV09projectToC03pip5enalpAA7Point3DVAH_ACtFZ":{"name":"projectToPlane(pip:enalp:)","abstract":"<p>Drop the point in the direction opposite of the normal</p>","parent_name":"Plane"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV4minX4maxX0E1Y0F1Y0E1Z0F1ZACSd_S5dtcfc":{"name":"init(minX:maxX:minY:maxY:minZ:maxZ:)","abstract":"<p>Rudimentary init","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV7corner17corner2AcA7Point3DV_AGtKcfc":{"name":"init(corner1:corner2:)","abstract":"<p>Build a brick from two points","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV12getRotCenterAA7Point3DVyF":{"name":"getRotCenter()","abstract":"<p>Find the center of the brick to use as the rotation center when displaying</p>","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV10getLongestSdyF":{"name":"getLongest()","abstract":"<p>Find the longest distance in any direction to set up display scaling</p>","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV13isOverlapping3lhs3rhsSbAC_ACtFZ":{"name":"isOverlapping(lhs:rhs:)","abstract":"<p>See whether the two volumes overlap</p>","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV9surrounds3big6littleSbAC_ACtFZ":{"name":"surrounds(big:little:)","abstract":"<p>See whether the big volume entirely contains the little volume.</p>","parent_name":"OrthoVol"},"Structs/OrthoVol.html#/s:9MeshTools8OrthoVolV9transform6xirtamAcA9TransformC_tF":{"name":"transform(xirtam:)","abstract":"<p>Move, rotate, and/or scale by a matrix","parent_name":"OrthoVol"},"Structs/CommonEdge.html#/s:9MeshTools10CommonEdgeV4endAAA7Point3DVvp":{"name":"endA","abstract":"<p>Undocumented</p>","parent_name":"CommonEdge"},"Structs/CommonEdge.html#/s:9MeshTools10CommonEdgeV4endBAA7Point3DVvp":{"name":"endB","abstract":"<p>Undocumented</p>","parent_name":"CommonEdge"},"Structs/CommonEdge.html#/s:9MeshTools10CommonEdgeV4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Generate the unique value","parent_name":"CommonEdge"},"Structs/CommonEdge.html#/s:9MeshTools10CommonEdgeV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Check to see that both edges use the same points, independent of ordering","parent_name":"CommonEdge"},"Structs/Facet.html#/s:9MeshTools5FacetV8getVertAAA7Point3DVyF":{"name":"getVertA()","abstract":"<p>Simple accessor</p>","parent_name":"Facet"},"Structs/Facet.html#/s:9MeshTools5FacetV8getVertBAA7Point3DVyF":{"name":"getVertB()","abstract":"<p>Simple accessor</p>","parent_name":"Facet"},"Structs/Facet.html#/s:9MeshTools5FacetV8getVertCAA7Point3DVyF":{"name":"getVertC()","abstract":"<p>Simple accessor</p>","parent_name":"Facet"},"Structs/Facet.html#/s:9MeshTools5FacetV6mirror5flake4flatA2C_AA5PlaneVtFZ":{"name":"mirror(flake:flat:)","abstract":"<p>These normal checks don&rsquo;t seem necessary","parent_name":"Facet"},"Structs/Facet.html#/s:9MeshTools5FacetV9genNormal9tricornerAA8Vector3DVAC_tKFZ":{"name":"genNormal(tricorner:)","abstract":"<p>Calculate the cross product of two edge directions","parent_name":"Facet"},"Structs/Facet.html#/s:9MeshTools5FacetV7reverseyyF":{"name":"reverse()","abstract":"<p>Change the order of vertices to generate the opposite normal</p>","parent_name":"Facet"},"Structs/Line.html#/s:9MeshTools4LineV4spot5arrowAcA7Point3DV_AA8Vector3DVtKcfc":{"name":"init(spot:arrow:)","abstract":"<p>Build a fresh one - with error checking.</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV9getOriginAA7Point3DVyF":{"name":"getOrigin()","abstract":"<p>Simple getter for the origin</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV12getDirectionAA8Vector3DVyF":{"name":"getDirection()","abstract":"<p>Simple getter for the direction</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV15resolveRelative6yonderSd5along_Sd4perptAA7Point3DV_tF":{"name":"resolveRelative(yonder:)","abstract":"<p>Find the position of a point relative to the line and its origin.","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV18resolveRelativeVec5arrowAA8Vector3DV5along_AG4perptAG_tF":{"name":"resolveRelativeVec(arrow:)","abstract":"<p>Find the components of a vector relative to the line</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV9dropPoint4awayAA7Point3DVAG_tF":{"name":"dropPoint(away:)","abstract":"<p>Project a point to the Line</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV12isCoincident9straightA3pipSbAC_AA7Point3DVtFZ":{"name":"isCoincident(straightA:pip:)","abstract":"<p>Checks to see if the trial point lies on the line</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV10isParallel9straightA0F1BSbAC_ACtFZ":{"name":"isParallel(straightA:straightB:)","abstract":"<p>Do two lines have the same direction, even with opposite sense?</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV12isCoincident9straightA0F1BSbAC_ACtFZ":{"name":"isCoincident(straightA:straightB:)","abstract":"<p>Check two lines  See that the either origin lies on the other line, and","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV10isCoplanar9straightA0F1BSbAC_ACtFZ":{"name":"isCoplanar(straightA:straightB:)","abstract":"<p>Verify that two lines could form a plane.</p>","parent_name":"Line"},"Structs/Line.html#/s:9MeshTools4LineV12intersectTwo9straightA0F1BAA7Point3DVAC_ACtKFZ":{"name":"intersectTwo(straightA:straightB:)","abstract":"<p>Generate a point by intersecting two Lines</p>","parent_name":"Line"},"Structs/Line.html":{"name":"Line","abstract":"<p>Unbounded and straight.  Contrast with LineSeg.</p>"},"Structs/Facet.html":{"name":"Facet","abstract":"<p>A triangle with additional functions</p>"},"Structs/CommonEdge.html":{"name":"CommonEdge","abstract":"<p>Document the topology across a triangle edge."},"Structs/OrthoVol.html":{"name":"OrthoVol","abstract":"<p>A &lsquo;brick&rsquo; aligned with the coordinate axes to envelop some geometry.  Useful for scaling and intersections."},"Structs/Plane.html":{"name":"Plane","abstract":"<p>Unbounded flat surface.</p>"},"Structs/Point3D.html":{"name":"Point3D","abstract":"<p>Simple representation of a position in space by the use of three orthogonal coordinates.</p>"},"Structs/Vector3D.html":{"name":"Vector3D","abstract":"<p>A direction built from three orthogonal components"},"Functions.html#/s:9MeshTools2eeoiySbAA16CoordinateSystemC_ADtF":{"name":"==(_:_:)","abstract":"<p>Check for them being identical</p>"},"Functions.html#/s:9MeshTools2eeoiySbAA4LineV_ADtF":{"name":"==(_:_:)","abstract":"<p>Check to see that the second origin lies on the first Line, and that"},"Functions.html#/s:9MeshTools2eeoiySbAA5PlaneV_ADtF":{"name":"==(_:_:)","abstract":"<p>Check for them being identical</p>"},"Functions.html#/s:9MeshTools2eeoiySbAA9TransformC_ADtF":{"name":"==(_:_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:9MeshTools1moiyAA7RowMtx4CAD_AA9TransformCtF":{"name":"*(_:_:)","abstract":"<p>Pre-multiply a row matrix and the square matrix</p>"},"Functions.html#/s:9MeshTools1moiyAA9TransformCAD_ADtF":{"name":"*(_:_:)","abstract":"<p>Combine rotations by multiplying two square matrices</p>"},"Functions.html#/s:9MeshTools1poiyAA8Vector3DVAD_ADtF":{"name":"+(_:_:)","abstract":"<p>Construct a vector that is the sum of the two input vectors</p>"},"Functions.html#/s:9MeshTools1soiyAA8Vector3DVAD_ADtF":{"name":"-(_:_:)","abstract":"<p>Construct a vector that is the difference between the two input vectors</p>"},"Functions.html#/s:9MeshTools1moiyAA8Vector3DVAD_SdtF":{"name":"*(_:_:)","abstract":"<p>Construct a vector by scaling the Vector3D by the Double argument</p>"},"Enums/Axis.html#/s:9MeshTools4AxisO1xyA2CmF":{"name":"x","abstract":"<p>Undocumented</p>","parent_name":"Axis"},"Enums/Axis.html#/s:9MeshTools4AxisO1yyA2CmF":{"name":"y","abstract":"<p>Undocumented</p>","parent_name":"Axis"},"Enums/Axis.html#/s:9MeshTools4AxisO1zyA2CmF":{"name":"z","abstract":"<p>Undocumented</p>","parent_name":"Axis"},"Enums/PenTypes.html#/s:9MeshTools8PenTypesO8BoundaryyA2CmF":{"name":"Boundary","abstract":"<p>Undocumented</p>","parent_name":"PenTypes"},"Enums/PenTypes.html#/s:9MeshTools8PenTypesO8OrdinaryyA2CmF":{"name":"Ordinary","abstract":"<p>Undocumented</p>","parent_name":"PenTypes"},"Enums/PenTypes.html#/s:9MeshTools8PenTypesO8InterioryA2CmF":{"name":"Interior","abstract":"<p>Undocumented</p>","parent_name":"PenTypes"},"Enums/PenTypes.html#/s:9MeshTools8PenTypesO7BlanketyA2CmF":{"name":"Blanket","abstract":"<p>Undocumented</p>","parent_name":"PenTypes"},"Enums/PenTypes.html":{"name":"PenTypes","abstract":"<p>Meaning that can be associated with various curves.  Used to set pen characteristics in the drawing routine.</p>"},"Enums/Axis.html":{"name":"Axis","abstract":"<p>Simple parameter to indicate axis of rotation</p>"},"Classes/RowMtx4.html#/s:9MeshTools7RowMtx4C6valOne0E3Two0E5Three0E4FourACSd_S3dtcfc":{"name":"init(valOne:valTwo:valThree:valFour:)","abstract":"<p>Undocumented</p>","parent_name":"RowMtx4"},"Classes/RowMtx4.html#/s:9MeshTools7RowMtx4C5vecInAcA8Vector3DV_tcfc":{"name":"init(vecIn:)","abstract":"<p>Undocumented</p>","parent_name":"RowMtx4"},"Classes/RowMtx4.html#/s:9MeshTools7RowMtx4C4ptInAcA7Point3DV_tcfc":{"name":"init(ptIn:)","abstract":"<p>Undocumented</p>","parent_name":"RowMtx4"},"Classes/RowMtx4.html#/s:9MeshTools7RowMtx4C7toPointAA7Point3DVyF":{"name":"toPoint()","abstract":"<p>Undocumented</p>","parent_name":"RowMtx4"},"Classes/RowMtx4.html#/s:9MeshTools7RowMtx4C8toVectorAA8Vector3DVyF":{"name":"toVector()","abstract":"<p>Undocumented</p>","parent_name":"RowMtx4"},"Classes/Transform.html#/s:9MeshTools9TransformCACycfc":{"name":"init()","abstract":"<p>Construct an identity matrix</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC1a1b1c1d1e1f1g1h1j1k1m1n1p1r1s1tACSd_S15dtcfc":{"name":"init(a:b:c:d:e:f:g:h:j:k:m:n:p:r:s:t:)","abstract":"<p>Construct a matrix from individual parameters</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC6deltaX0D1Y0D1ZACSd_S2dtcfc":{"name":"init(deltaX:deltaY:deltaZ:)","abstract":"<p>Construct a matrix to do translation only</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC6scaleX0D1Y0D1ZACSd_S2dtcfc":{"name":"init(scaleX:scaleY:scaleZ:)","abstract":"<p>Construct a matrix to do scaling","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC12rotationAxis8angleRadAcA0E0O_Sdtcfc":{"name":"init(rotationAxis:angleRad:)","abstract":"<p>Construct a matrix for rotation around a single axis</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC6localX0D1Y0D1ZAcA8Vector3DV_A2Htcfc":{"name":"init(localX:localY:localZ:)","abstract":"<p>Create a transform from orthogonal vectors</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC5alter3pipAA7Point3DVAG_tF":{"name":"alter(pip:)","abstract":"<p>Move, rotate, and/or scale by a matrix.","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC5alter5arrowAA8Vector3DVAG_tF":{"name":"alter(arrow:)","abstract":"<p>Rotate by a matrix</p>","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC11genToGlobal4csysAcA16CoordinateSystemC_tFZ":{"name":"genToGlobal(csys:)","abstract":"<p>Generate a Transform to rotate and translate from a local CSYS TO the global coordinate system.","parent_name":"Transform"},"Classes/Transform.html#/s:9MeshTools9TransformC13genFromGlobal4csysAcA16CoordinateSystemC_tFZ":{"name":"genFromGlobal(csys:)","abstract":"<p>Generate a Transform to get points FROM the global CSYS.","parent_name":"Transform"},"Classes/Mesh.html#/s:9MeshTools0A0C7EpsilonSdvpZ":{"name":"Epsilon","abstract":"<p>Definition of &ldquo;equal&rdquo; for point coordinates for this mesh.  Used to hash in &ldquo;Edge&rdquo;.","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C10recordEdge7ptAlpha0E5OmegayAA7Point3DV_AHtKF":{"name":"recordEdge(ptAlpha:ptOmega:)","abstract":"<p>Add a CommonEdge to one of the Sets for this mesh.</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C15recordMatedEdge7ptAlpha0F5OmegayAA7Point3DV_AHtKF":{"name":"recordMatedEdge(ptAlpha:ptOmega:)","abstract":"<p>Add a CommonEdge to one of the Sets for this mesh.</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C6absorb4noobyAC_tKF":{"name":"absorb(noob:)","abstract":"<p>Combine two Meshes.","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C12fillRingStep5inner5outerACSayAA7Point3DVG_AItKFZ":{"name":"fillRingStep(inner:outer:)","abstract":"<p>Make triangles between two full Arcs.","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C9duoLadder0C04oppoACSayAA7Point3DVG_AItKFZ":{"name":"duoLadder(duo:oppo:)","abstract":"<p>Fill a ladder with two points on one side, and up to six on the other.","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C10findBigGap5chainSiSayAA7Point3DVG_tFZ":{"name":"findBigGap(chain:)","abstract":"<p>Find the lower index of the pair that has the largest gap</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C12meshFromFour3ptA0F1B0F1C0F1DAcA7Point3DV_A3JtKFZ":{"name":"meshFromFour(ptA:ptB:ptC:ptD:)","abstract":"<p>Build a Mesh of two Facets from four points - using the shorter common edge","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C10fillLadder4port9starboardACSayAA7Point3DVG_AItFZ":{"name":"fillLadder(port:starboard:)","abstract":"<p>Fill a strip with triangles.  Port and starboard are important to get triangle normals in the proper direction.","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C10isCoherent4knit5guideSbAC_AA8Vector3DVtFZ":{"name":"isCoherent(knit:guide:)","abstract":"<p>See that facet normals are not opposite of the guide direction</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C9transform6source6xirtamA2C_AA9TransformCtFZ":{"name":"transform(source:xirtam:)","abstract":"<p>Transform a Mesh copy including the creation of new topology","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C6mirror4knit4flatA2C_AA5PlaneVtFZ":{"name":"mirror(knit:flat:)","abstract":"<p>Create a duplicate Mesh on the other side of a Plane</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C8getMated6screenSayAA7LineSegCGAC_tFZ":{"name":"getMated(screen:)","abstract":"<p>Return LineSegs for the edges that are used exactly twice</p>","parent_name":"Mesh"},"Classes/Mesh.html#/s:9MeshTools0A0C7getBach6screenSayAA7LineSegCGAC_tFZ":{"name":"getBach(screen:)","abstract":"<p>Return LineSegs for the edges that are used only once</p>","parent_name":"Mesh"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC5usageAA8PenTypesOvp":{"name":"usage","abstract":"<p>The enum that hints at the meaning of the curve</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC14parameterRangeSNySdGvp":{"name":"parameterRange","abstract":"<p>Undocumented</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC4end14end2AcA7Point3DV_AGtKcfc":{"name":"init(end1:end2:)","abstract":"<p>Build a line segment from two points</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9getOneEndAA7Point3DVyF":{"name":"getOneEnd()","abstract":"<p>Fetch the location of an end</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC11getOtherEndAA7Point3DVyF":{"name":"getOtherEnd()","abstract":"<p>Fetch the location of the opposite end</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC7reverseyyF":{"name":"reverse()","abstract":"<p>Flip the order of the end points  Used to align members of a Perimeter</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9setIntent7purposeyAA8PenTypesO_tF":{"name":"setIntent(purpose:)","abstract":"<p>Attach new meaning to the curve</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9getExtentAA8OrthoVolVyF":{"name":"getExtent()","abstract":"<p>Get the box that bounds the curve</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC7pointAt1tAA7Point3DVSd_tKF":{"name":"pointAt(t:)","abstract":"<p>Find the point along this line segment specified by the parameter &lsquo;t&rsquo;","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9transform6xirtamAcA9TransformC_tKF":{"name":"transform(xirtam:)","abstract":"<p>Move, rotate, and scale by a matrix</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC4draw7context5tformySo12CGContextRefa_So17CGAffineTransformVtF":{"name":"draw(context:tform:)","abstract":"<p>Plot the line segment.  This will be called by the UIView &lsquo;drawRect&rsquo; function</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC18resolveRelativeVec5speckAA8Vector3DV5along_AG4perptAA7Point3DV_tF":{"name":"resolveRelativeVec(speck:)","abstract":"<p>Find the position of a point relative to the LineSeg</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC15resolveRelative5speckSd5along_Sd4awaytAA7Point3DV_tF":{"name":"resolveRelative(speck:)","abstract":"<p>Find two distances describing the position of a point relative to the LineSeg.</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC12getDirectionAA8Vector3DVyF":{"name":"getDirection()","abstract":"<p>Create a unit vector showing direction</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9tangentAt1tAA8Vector3DVSd_tF":{"name":"tangentAt(t:)","abstract":"<p>Return the tangent vector, which won&rsquo;t depend on the input parameter","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC6clipTo4stub8keepNearAcA7Point3DV_SbtF":{"name":"clipTo(stub:keepNear:)","abstract":"<p>Create a trimmed version</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9crosshair3pip10halfLengthSayACGAA7Point3DV_SdtFZ":{"name":"crosshair(pip:halfLength:)","abstract":"<p>Draw crosshairs to show point locations","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC10isCrossing4chopSbAC_tF":{"name":"isCrossing(chop:)","abstract":"<p>See if another segment crosses this one","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC9findCrown8smallerT7largerTS2d_SdtF":{"name":"findCrown(smallerT:largerT:)","abstract":"<p>Calculate the crown over a small segment</p>","parent_name":"LineSeg"},"Classes/LineSeg.html#/s:9MeshTools7LineSegC8findStep14allowableCrown8currentT10increasingS2d_SdSbtF":{"name":"findStep(allowableCrown:currentT:increasing:)","abstract":"<p>Find the change in parameter that meets the crown requirement</p>","parent_name":"LineSeg"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemCACycfc":{"name":"init()","abstract":"<p>Construct an equivalent to the global CSYS.","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC4spot5alpha4beta5gammaAcA7Point3DV_AA8Vector3DVA2KtKcfc":{"name":"init(spot:alpha:beta:gamma:)","abstract":"<p>Construct from a point and three vectors</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC4spot10direction110direction28useFirst11verticalRefAcA7Point3DV_AA8Vector3DVALS2btKcfc":{"name":"init(spot:direction1:direction2:useFirst:verticalRef:)","abstract":"<p>Generate from two vectors and a point.</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC9getOriginAA7Point3DVyF":{"name":"getOrigin()","abstract":"<p>Undocumented</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC8getAxisXAA8Vector3DVyF":{"name":"getAxisX()","abstract":"<p>Undocumented</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC8getAxisYAA8Vector3DVyF":{"name":"getAxisY()","abstract":"<p>Undocumented</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC8getAxisZAA8Vector3DVyF":{"name":"getAxisZ()","abstract":"<p>Undocumented</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC10isMutOrtho3uno3dos4tresSbAA8Vector3DV_A2ItFZ":{"name":"isMutOrtho(uno:dos:tres:)","abstract":"<p>Check to see that these three vectors are mutually orthogonal</p>","parent_name":"CoordinateSystem"},"Classes/CoordinateSystem.html#/s:9MeshTools16CoordinateSystemC8relocate12startingCSYS12betterOriginA2C_AA7Point3DVtFZ":{"name":"relocate(startingCSYS:betterOrigin:)","abstract":"<p>Create from an existing CSYS, but use a different origin</p>","parent_name":"CoordinateSystem"},"Classes.html#/s:9MeshTools20CoincidentLinesErrorC":{"name":"CoincidentLinesError","abstract":"<p>Exception for when the lines shouldn&rsquo;t have been coincident - i.e. when trying to intersect them</p>"},"Classes.html#/s:9MeshTools21CoincidentPointsErrorC":{"name":"CoincidentPointsError","abstract":"<p>Exception for when the points should not have be coincident</p>"},"Classes/CoordinateSystem.html":{"name":"CoordinateSystem","abstract":"<p>Three coordinates and three orthogonal axes</p>"},"Classes.html#/s:9MeshTools20IdenticalVectorErrorC":{"name":"IdenticalVectorError","abstract":"<p>Exception for two vectors that shouldn&rsquo;t be duplicates</p>"},"Classes.html#/s:9MeshTools16LadderCountErrorC":{"name":"LadderCountError","abstract":"<p>Exception for when a ladder was specified with an overly large delta between the two sides</p>"},"Classes/LineSeg.html":{"name":"LineSeg","abstract":"<p>A wire between two points.</p>"},"Classes/Mesh.html":{"name":"Mesh","abstract":"<p>Main class for Set operations</p>"},"Classes.html#/s:9MeshTools21NonCoPlanarLinesErrorC":{"name":"NonCoPlanarLinesError","abstract":"<p>Exception for when the lines should have been coplanar - i.e. when trying to intersect them</p>"},"Classes.html#/s:9MeshTools22NonOrthogonalCSYSErrorC":{"name":"NonOrthogonalCSYSError","abstract":"<p>Undocumented</p>"},"Classes.html#/s:9MeshTools21NonUnitDirectionErrorC":{"name":"NonUnitDirectionError","abstract":"<p>Exception for failure to supply a unit vector when constructing a line or plane</p>"},"Classes.html#/s:9MeshTools18ParallelLinesErrorC":{"name":"ParallelLinesError","abstract":"<p>Exception for when the lines shouldn&rsquo;t have been parallel - i.e. when trying to intersect them</p>"},"Classes/Transform.html":{"name":"Transform","abstract":"<p>Built the way I was taught in college, as opposed to being twisted to use SIMD</p>"},"Classes/RowMtx4.html":{"name":"RowMtx4","abstract":"<p>Row matrix of length 4</p>"},"Classes.html#/s:9MeshTools9WorkBenchC":{"name":"WorkBench","abstract":"<p>Undocumented</p>"},"Classes.html#/s:9MeshTools15ZeroVectorErrorC":{"name":"ZeroVectorError","abstract":"<p>Exception for failure to supply a useful vector</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}